# Generated by Django 5.1.2 on 2025-09-22 20:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bots', '0056_participant_is_host'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='botevent',
            name='valid_event_type_event_sub_type_combinations',
        ),
        migrations.AlterField(
            model_name='botevent',
            name='event_sub_type',
            field=models.IntegerField(choices=[(1, 'Bot could not join meeting - Meeting Not Started - Waiting for Host'), (2, 'Fatal error - Process Terminated'), (3, 'Bot could not join meeting - Zoom Authorization Failed'), (4, 'Bot could not join meeting - Zoom Meeting Status Failed'), (5, 'Bot could not join meeting - Unpublished Zoom Apps cannot join external meetings. See https://developers.zoom.us/docs/distribute/sdk-feature-review-requirements/'), (6, 'Fatal error - RTMP Connection Failed'), (7, 'Bot could not join meeting - Zoom SDK Internal Error'), (8, 'Fatal error - UI Element Not Found'), (9, 'Bot could not join meeting - Request to join denied'), (10, 'Leave requested - User requested'), (11, 'Leave requested - Auto leave silence'), (12, 'Leave requested - Auto leave only participant in meeting'), (13, 'Fatal error - Heartbeat timeout'), (14, 'Bot could not join meeting - Meeting not found'), (15, 'Fatal error - Bot not launched'), (16, 'Bot could not join meeting - Waiting room timeout exceeded'), (17, 'Leave requested - Auto leave max uptime exceeded'), (18, 'Bot could not join meeting - Login required. Use signed in bots: https://docs.attendee.dev/guides/signed-in-bots to resolve.'), (19, 'Bot could not join meeting - Bot login attempt failed'), (20, 'Fatal error - Out of credits'), (21, 'Bot could not join meeting - Unable to connect to meeting. This usually means the meeting password in the URL is incorrect.'), (22, 'Fatal error - Attendee internal error'), (23, 'Bot recording permission denied - Host denied permission'), (24, 'Bot recording permission denied - Request timed out'), (25, 'Bot recording permission denied - Host client cannot grant permission')], null=True),
        ),
        migrations.AddConstraint(
            model_name='botevent',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('event_type', 7), models.Q(('event_sub_type', 2), ('event_sub_type', 22), ('event_sub_type', 20), ('event_sub_type', 6), ('event_sub_type', 8), ('event_sub_type', 13), ('event_sub_type', 15), _connector='OR')), models.Q(('event_type', 9), models.Q(('event_sub_type', 1), ('event_sub_type', 21), ('event_sub_type', 16), ('event_sub_type', 3), ('event_sub_type', 18), ('event_sub_type', 19), ('event_sub_type', 4), ('event_sub_type', 5), ('event_sub_type', 7), ('event_sub_type', 9), ('event_sub_type', 14), _connector='OR')), models.Q(('event_type', 8), models.Q(('event_sub_type', 10), ('event_sub_type', 11), ('event_sub_type', 12), ('event_sub_type', 17), ('event_sub_type__isnull', True), _connector='OR')), models.Q(('event_type', 19), models.Q(('event_sub_type', 23), ('event_sub_type', 24), ('event_sub_type', 25), _connector='OR')), models.Q(models.Q(('event_type', 7), _negated=True), models.Q(('event_type', 9), _negated=True), models.Q(('event_type', 8), _negated=True), ('event_sub_type__isnull', True)), _connector='OR'), name='valid_event_type_event_sub_type_combinations'),
        ),
    ]
